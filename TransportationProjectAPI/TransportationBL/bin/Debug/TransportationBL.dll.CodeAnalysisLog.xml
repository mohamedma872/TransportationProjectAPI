<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\bin\Debug\TransportationBL.dll">
   <Modules>
    <Module Name="transportationbl.dll">
     <Namespaces>
      <Namespace Name="TransportationBL.BL">
       <Types>
        <Type Name="CustomerBl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EditCustomerProfile(TransportationBL.Model.CustomerProfileModel)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="CustomerBl.cs" Line="90">Object 'db' can be disposed more than once in method 'CustomerBl.EditCustomerProfile(CustomerProfileModel)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 90</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="CustomerBl.cs" Line="88">'CustomerBl.EditCustomerProfile(CustomerProfileModel)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCustomerProfile(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="CustomerBl.cs" Line="46">Object 'db' can be disposed more than once in method 'CustomerBl.GetCustomerProfile(int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 46</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="CustomerBl.cs" Line="44">'CustomerBl.GetCustomerProfile(int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DriverBl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetDriverProfile(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="DriverBl.cs" Line="79">Object 'db' can be disposed more than once in method 'DriverBl.GetDriverProfile(int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 79</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="DriverBl.cs" Line="77">'DriverBl.GetDriverProfile(int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertNewDriver(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="DriverBl.cs" Line="45">Object 'db' can be disposed more than once in method 'DriverBl.InsertNewDriver(int, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 45</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="DriverBl.cs" Line="43">'DriverBl.InsertNewDriver(int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TripBL" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetDriverTripDetail(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="TripBL.cs" Line="110">Object 'db' can be disposed more than once in method 'TripBL.GetDriverTripDetail(int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 110</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="TripBL.cs" Line="108">'TripBL.GetDriverTripDetail(int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTripDetail(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="TripBL.cs" Line="76">Object 'db' can be disposed more than once in method 'TripBL.GetTripDetail(int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 76</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="TripBL.cs" Line="74">'TripBL.GetTripDetail(int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTripsHistory(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="TripBL.cs" Line="41">Object 'db' can be disposed more than once in method 'TripBL.GetTripsHistory(int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 41</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="TripBL.cs" Line="39">'TripBL.GetTripsHistory(int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UserBL" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#checkEmail(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="UserBL.cs" Line="83">Object 'db' can be disposed more than once in method 'UserBL.checkEmail(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 83</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="UserBL.cs" Line="81">'UserBL.checkEmail(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#checkphonenumber(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="UserBL.cs" Line="46">Object 'db' can be disposed more than once in method 'UserBL.checkphonenumber(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 46</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="UserBL.cs" Line="44">'UserBL.checkphonenumber(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="VehicelBl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAllVehicleCategory()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="39">Object 'db' can be disposed more than once in method 'VehicelBl.GetAllVehicleCategory()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 39</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="37">'VehicelBl.GetAllVehicleCategory()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVehicleCategoryByType(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="222">Object 'db' can be disposed more than once in method 'VehicelBl.GetVehicleCategoryByType(int, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 222</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="220">'VehicelBl.GetVehicleCategoryByType(int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVehicleCategoryType(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="187">Object 'db' can be disposed more than once in method 'VehicelBl.GetVehicleCategoryType(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 187</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="185">'VehicelBl.GetVehicleCategoryType(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVehicleData(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="153">Object 'db' can be disposed more than once in method 'VehicelBl.GetVehicleData(int, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 153</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="151">'VehicelBl.GetVehicleData(int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVehicleModel(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="255">Object 'db' can be disposed more than once in method 'VehicelBl.GetVehicleModel(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 255</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="253">'VehicelBl.GetVehicleModel(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertNewVehicle(TransportationBL.Model.InsertVehcielModel)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="120">Object 'db' can be disposed more than once in method 'VehicelBl.InsertNewVehicle(InsertVehcielModel)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 120</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="118">'VehicelBl.InsertNewVehicle(InsertVehcielModel)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateVehicleData(TransportationBL.Model.VehcielModel)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="79">Object 'db' can be disposed more than once in method 'VehicelBl.UpdateVehicleData(VehcielModel)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 79</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\BL" File="VehicelBl.cs" Line="77">'VehicelBl.UpdateVehicleData(VehcielModel)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="TransportationBL.Shared">
       <Types>
        <Type Name="BusinessException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'BusinessException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="TransportationBL.utilities">
       <Types>
        <Type Name="Utilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InsertLog(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2018-09-04 14:06:15Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="D:\mobile projects\TransportationProjectAPI\TransportationProjectAPI\TransportationBL\utilities" File="Utilities.cs" Line="33">Object 'db' can be disposed more than once in method 'Utilities.InsertLog(string, string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 33</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 110</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
